using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Covergo.AADProvisioning.Domain;
using Covergo.AADProvisioning.Domain.User;
using Covergo.AADProvisioning.Infratructure.Service;
using Covergo.AADProvisioning.Provider;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.IdentityModel.Tokens;
using Microsoft.SystemForCrossDomainIdentityManagement;
using Individual = Covergo.AADProvisioning.Domain.Individual;
using SymmetricSecurityKey = Microsoft.IdentityModel.Tokens.SymmetricSecurityKey;

namespace Covergo.AADProvisioning
{
    public class Startup
    {
        private readonly IWebHostEnvironment _environment;
        public IConfiguration Configuration { get; }


        //public IMonitor MonitoringBehavior { get; set; }
        //public IProvider ProviderBehavior { get; set; }

        public Startup(IWebHostEnvironment env, IConfiguration configuration)
        {
            _environment = env;
            Configuration = configuration;
        }


        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            

            if (this._environment.IsDevelopment())
            {
                // Development environment code
                // Validation for bearer token for authorization used during testing.
                // NOTE: It's not recommended to use this code in production, it is not meant to replace proper OAuth authentication.
                //       This option is primarily available for testing purposes.
                services.AddAuthentication(options =>
                {
                    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                })
                .AddJwtBearer(options =>
                {
                    options.TokenValidationParameters =
                        new TokenValidationParameters
                        {
                            ValidateIssuer = false,
                            ValidateAudience = false,
                            ValidateLifetime = false,
                            ValidateIssuerSigningKey = false,
                            ValidIssuer = this.Configuration["Token:TokenIssuer"],
                            ValidAudience = this.Configuration["Token:TokenAudience"],
                            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(this.Configuration["Token:IssuerSigningKey"]))
                        };
                });
            }
            else
            {
                // Leave the optional Secret Token field blank
                // Azure AD includes an OAuth bearer token issued from Azure AD with each request
                // The following code validates the Azure AD-issued token
                // NOTE: It's not recommended to leave this field blank and rely on a token generated by Azure AD. 
                //       This option is primarily available for testing purposes.
                services.AddAuthentication(options =>
                {
                    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                })
                .AddJwtBearer(options =>
                {
                    options.Authority = this.Configuration["Token:TokenIssuer"];
                    options.Audience = this.Configuration["Token:TokenAudience"];
                    options.Events = new JwtBearerEvents
                    {
                        OnTokenValidated = context =>
                        {
                            // NOTE: You can optionally take action when the OAuth 2.0 bearer token was validated.

                            return Task.CompletedTask;
                        },
                        OnAuthenticationFailed = AuthenticationFailed
                    };
                });
            }
            services.AddControllers().AddNewtonsoftJson();
            services.AddHttpClient<IEntityService<Individual>, CoverGoEntityService<Individual>>(c => c.BaseAddress = new Uri($"{Configuration["serviceUrls:users"]}"));
            services.AddSingleton<Service.IProvider, InMemoryProvider>();
            services.AddSingleton<IMonitor, ConsoleMonitor>();
            services.AddHttpClient<IUserService, CoverGoPolicyService>(c => c.BaseAddress = new Uri($"{Configuration["serviceUrls:policies"]}"));
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (this._environment.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseHsts();

            app.UseRouting();
            app.UseHttpsRedirection();
            app.UseAuthentication();
            app.UseAuthorization();

            app.UseEndpoints(
                endpoints =>
                {
                    endpoints.MapDefaultControllerRoute();
                });
        }
        private Task AuthenticationFailed(AuthenticationFailedContext arg)
        {
            // For debugging purposes only!
            string authenticationExceptionMessage = $"{{AuthenticationFailed: '{arg.Exception.Message}'}}";

            arg.Response.ContentLength = authenticationExceptionMessage.Length;
            arg.Response.Body.WriteAsync(
                Encoding.UTF8.GetBytes(authenticationExceptionMessage),
                0,
                authenticationExceptionMessage.Length);

            return Task.FromException(arg.Exception);
        }
    }
}
